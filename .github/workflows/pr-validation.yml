name: PR Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'infrastructure/**'

jobs:
  validate-manifests:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v2
      with:
        kustomize-version: "5.0.0"
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Flux CLI
      uses: fluxcd/flux2/action@main
      with:
        version: 'latest'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.14.0'
    
    - name: Validate directory structure
      run: |
        echo "üîç Validating directory structure..."
        
        # Function to validate base/overlays structure
        validate_structure() {
          local dir=$1
          local type=$2
          
          if [ ! -d "$dir" ]; then
            echo "‚ùå Directory $dir does not exist"
            return 1
          fi
          
          # Check for base directory
          if [ ! -d "$dir/base" ]; then
            echo "‚ùå Missing base directory in $dir"
            return 1
          fi
          
          # Check for base kustomization.yaml
          if [ ! -f "$dir/base/kustomization.yaml" ]; then
            echo "‚ùå Missing base/kustomization.yaml in $dir"
            return 1
          fi
          
          # Check for overlays directory (for apps and infrastructure)
          if [[ "$type" == "app" || "$type" == "infrastructure" ]]; then
            if [ ! -d "$dir/overlays" ]; then
              echo "‚ùå Missing overlays directory in $dir"
              return 1
            fi
            
            # Check for dev and prod overlays
            for env in dev prod; do
              if [ ! -d "$dir/overlays/$env" ]; then
                echo "‚ùå Missing overlays/$env directory in $dir"
                return 1
              fi
              
              if [ ! -f "$dir/overlays/$env/kustomization.yaml" ]; then
                echo "‚ùå Missing overlays/$env/kustomization.yaml in $dir"
                return 1
              fi
            done
          fi
          
          echo "‚úÖ Structure valid for $dir"
          return 0
        }
        
        # Validate apps structure
        echo "üì¶ Validating apps structure..."
        for category in apps/*/; do
          if [ -d "$category" ]; then
            for app in "$category"*/; do
              if [ -d "$app" ]; then
                validate_structure "$app" "app" || exit 1
              fi
            done
          fi
        done
        
        # Validate infrastructure structure  
        echo "üèóÔ∏è Validating infrastructure structure..."
        for component in infrastructure/*/; do
          if [ -d "$component" ] && [ "$(basename "$component")" != "namespace" ]; then
            validate_structure "$component" "infrastructure" || exit 1
          fi
        done
        
        echo "‚úÖ All directory structures are valid!"

    - name: Validate kustomization files
      run: |
        echo "üîß Validating kustomization.yaml files..."
        
        # Simple approach: if kustomize can build it, the kustomization is valid
        echo "Note: Kustomization validation will be done in the build step"
        
        echo "‚úÖ All kustomization files are valid!"

    - name: Validate kustomize build
      run: |
        echo "üî® Testing kustomize build for all overlays..."
        
        # Function to test kustomize build
        test_build() {
          local overlay_dir=$1
          
          echo "Testing build for $overlay_dir..."
          
          if kustomize build "$overlay_dir" >/dev/null 2>&1; then
            echo "‚úÖ Build successful: $overlay_dir"
            return 0
          else
            echo "‚ùå Build failed: $overlay_dir"
            kustomize build "$overlay_dir"
            return 1
          fi
        }
        
        # Test all app overlays
        for overlay in apps/*/overlays/*/; do
          if [ -d "$overlay" ]; then
            test_build "$overlay" || exit 1
          fi
        done
        
        # Test all infrastructure overlays
        for overlay in infrastructure/*/overlays/*/; do
          if [ -d "$overlay" ]; then
            test_build "$overlay" || exit 1
          fi
        done
        
        
        echo "‚úÖ All kustomize builds successful!"

    - name: Validate Flux HelmRelease and HelmRepository
      run: |
        echo "‚öì Validating Flux HelmRelease and HelmRepository resources..."
        
        # Function to validate Flux resources
        validate_flux_resources() {
          local overlay_dir=$1
          
          echo "Validating Flux resources in $overlay_dir..."
          
          # Build and extract resources
          local output_file=$(mktemp)
          if ! kustomize build "$overlay_dir" > "$output_file" 2>/dev/null; then
            echo "‚ùå Failed to build $overlay_dir"
            rm "$output_file"
            return 1
          fi
          
          # Check for HelmRelease resources
          if grep -q "kind: HelmRelease" "$output_file"; then
            echo "üéØ Found HelmRelease resources in $overlay_dir"
            
            # Basic validation for required fields
            if ! grep -q "spec:" "$output_file" || ! grep -q "chart:" "$output_file"; then
              echo "‚ùå Invalid HelmRelease structure in $overlay_dir"
              rm "$output_file"
              return 1
            fi
            
            echo "‚úÖ Valid HelmRelease structure"
          fi
          
          # Check for HelmRepository resources
          if grep -q "kind: HelmRepository" "$output_file"; then
            echo "üì¶ Found HelmRepository resources in $overlay_dir"
            
            # Basic validation for required fields
            if ! grep -q "spec:" "$output_file" || ! grep -q "url:" "$output_file"; then
              echo "‚ùå Invalid HelmRepository structure in $overlay_dir"
              rm "$output_file"
              return 1
            fi
            
            echo "‚úÖ Valid HelmRepository structure"
          fi
          
          rm "$output_file"
          return 0
        }
        
        # Validate all overlays that might contain Flux resources
        for overlay in infrastructure/*/overlays/*/ apps/*/overlays/*/; do
          if [ -d "$overlay" ]; then
            validate_flux_resources "$overlay" || exit 1
          fi
        done
        
        echo "‚úÖ All Flux resources are valid!"

    - name: Validate SealedSecrets
      run: |
        echo "üîê Validating SealedSecret resources..."
        
        # Function to validate SealedSecret resources
        validate_sealed_secrets() {
          local overlay_dir=$1
          
          echo "Validating SealedSecrets in $overlay_dir..."
          
          # Build and extract resources
          local output_file=$(mktemp)
          if ! kustomize build "$overlay_dir" > "$output_file" 2>/dev/null; then
            echo "‚ùå Failed to build $overlay_dir"
            rm "$output_file"
            return 1
          fi
          
          # Check for SealedSecret resources
          if grep -q "kind: SealedSecret" "$output_file"; then
            echo "üîí Found SealedSecret resources in $overlay_dir"
            
            # Check for placeholder values that need to be replaced
            if grep -q "REPLACE_WITH_SEALED" "$output_file"; then
              echo "‚ö†Ô∏è SealedSecret contains placeholder values in $overlay_dir"
              echo "   Remember to replace REPLACE_WITH_SEALED_* placeholders with actual sealed values"
            fi
            
            echo "‚úÖ SealedSecret structure validated"
          fi
          
          rm "$output_file"
          return 0
        }
        
        # Validate all overlays that might contain SealedSecret resources
        for overlay in infrastructure/*/overlays/*/ apps/*/overlays/*/; do
          if [ -d "$overlay" ]; then
            validate_sealed_secrets "$overlay" || exit 1
          fi
        done
        
        echo "‚úÖ All SealedSecret resources are valid!"

    - name: Validate Flux HelmRelease and HelmRepository
      run: |
        echo "‚öì Validating Flux HelmRelease and HelmRepository resources..."
        
        # Function to validate Flux resources
        validate_flux_resources() {
          local overlay_dir=$1
          
          echo "Validating Flux resources in $overlay_dir..."
          
          # Build and extract resources
          local output_file=$(mktemp)
          if ! kustomize build "$overlay_dir" > "$output_file" 2>/dev/null; then
            echo "‚ùå Failed to build $overlay_dir"
            rm "$output_file"
            return 1
          fi
          
          # Check for HelmRelease resources
          local helm_releases=$(yq eval 'select(.kind == "HelmRelease")' "$output_file" 2>/dev/null || true)
          if [ -n "$helm_releases" ] && [ "$helm_releases" != "null" ]; then
            echo "üéØ Found HelmRelease resources in $overlay_dir"
            
            # Validate HelmRelease structure
            yq eval 'select(.kind == "HelmRelease") | .[]' "$output_file" 2>/dev/null | while IFS= read -r release; do
              if [ -n "$release" ] && [ "$release" != "null" ]; then
                # Check required fields
                local chart_name=$(echo "$release" | yq eval '.spec.chart.spec.chart // ""' -)
                local source_ref=$(echo "$release" | yq eval '.spec.chart.spec.sourceRef.name // ""' -)
                local interval=$(echo "$release" | yq eval '.spec.interval // ""' -)
                
                if [ -z "$chart_name" ] || [ -z "$source_ref" ] || [ -z "$interval" ]; then
                  echo "‚ùå Invalid HelmRelease structure in $overlay_dir"
                  echo "   Missing required fields: chart.spec.chart, chart.spec.sourceRef.name, or interval"
                  rm "$output_file"
                  return 1
                fi
                
                echo "‚úÖ Valid HelmRelease: chart=$chart_name, sourceRef=$source_ref"
              fi
            done
          fi
          
          # Check for HelmRepository resources
          local helm_repos=$(yq eval 'select(.kind == "HelmRepository")' "$output_file" 2>/dev/null || true)
          if [ -n "$helm_repos" ] && [ "$helm_repos" != "null" ]; then
            echo "üì¶ Found HelmRepository resources in $overlay_dir"
            
            # Validate HelmRepository structure
            yq eval 'select(.kind == "HelmRepository") | .[]' "$output_file" 2>/dev/null | while IFS= read -r repo; do
              if [ -n "$repo" ] && [ "$repo" != "null" ]; then
                local repo_url=$(echo "$repo" | yq eval '.spec.url // ""' -)
                local repo_interval=$(echo "$repo" | yq eval '.spec.interval // ""' -)
                
                if [ -z "$repo_url" ] || [ -z "$repo_interval" ]; then
                  echo "‚ùå Invalid HelmRepository structure in $overlay_dir"
                  echo "   Missing required fields: spec.url or spec.interval"
                  rm "$output_file"
                  return 1
                fi
                
                echo "‚úÖ Valid HelmRepository: url=$repo_url"
              fi
            done
          fi
          
          rm "$output_file"
          return 0
        }
        
        # Validate all overlays that might contain Flux resources
        for overlay in infrastructure/*/overlays/*/ apps/*/overlays/*/; do
          if [ -d "$overlay" ]; then
            validate_flux_resources "$overlay" || exit 1
          fi
        done
        
        echo "‚úÖ All Flux resources are valid!"

    - name: Validate SealedSecrets
      run: |
        echo "üîê Validating SealedSecret resources..."
        
        # Function to validate SealedSecret resources
        validate_sealed_secrets() {
          local overlay_dir=$1
          
          echo "Validating SealedSecrets in $overlay_dir..."
          
          # Build and extract resources
          local output_file=$(mktemp)
          if ! kustomize build "$overlay_dir" > "$output_file" 2>/dev/null; then
            echo "‚ùå Failed to build $overlay_dir"
            rm "$output_file"
            return 1
          fi
          
          # Check for SealedSecret resources
          local sealed_secrets=$(yq eval 'select(.kind == "SealedSecret")' "$output_file" 2>/dev/null || true)
          if [ -n "$sealed_secrets" ] && [ "$sealed_secrets" != "null" ]; then
            echo "üîí Found SealedSecret resources in $overlay_dir"
            
            # Validate SealedSecret structure
            yq eval 'select(.kind == "SealedSecret") | .[]' "$output_file" 2>/dev/null | while IFS= read -r secret; do
              if [ -n "$secret" ] && [ "$secret" != "null" ]; then
                local encrypted_data=$(echo "$secret" | yq eval '.spec.encryptedData // ""' -)
                local template_name=$(echo "$secret" | yq eval '.spec.template.metadata.name // ""' -)
                
                if [ -z "$encrypted_data" ] || [ -z "$template_name" ]; then
                  echo "‚ùå Invalid SealedSecret structure in $overlay_dir"
                  echo "   Missing required fields: spec.encryptedData or spec.template.metadata.name"
                  rm "$output_file"
                  return 1
                fi
                
                # Check for placeholder values that need to be replaced
                if echo "$encrypted_data" | grep -q "REPLACE_WITH_SEALED"; then
                  echo "‚ö†Ô∏è SealedSecret contains placeholder values in $overlay_dir"
                  echo "   Remember to replace REPLACE_WITH_SEALED_* placeholders with actual sealed values"
                fi
                
                echo "‚úÖ Valid SealedSecret: $template_name"
              fi
            done
          fi
          
          rm "$output_file"
          return 0
        }
        
        # Validate all overlays that might contain SealedSecret resources
        for overlay in infrastructure/*/overlays/*/ apps/*/overlays/*/; do
          if [ -d "$overlay" ]; then
            validate_sealed_secrets "$overlay" || exit 1
          fi
        done
        
        echo "‚úÖ All SealedSecret resources are valid!"

    - name: Validate Kubernetes manifests
      run: |
        echo "‚ò∏Ô∏è Validating Kubernetes manifest syntax..."
        
        # Function to validate K8s manifests by parsing YAML output
        validate_k8s_manifest() {
          local overlay_dir=$1
          
          echo "Validating K8s resources in $overlay_dir..."
          
          # Build with kustomize and validate YAML structure
          local output_file=$(mktemp)
          if kustomize build "$overlay_dir" > "$output_file" 2>/dev/null; then
            # Check if output contains valid Kubernetes resources
            if grep -q "apiVersion:" "$output_file" && grep -q "kind:" "$output_file"; then
              echo "‚úÖ Valid K8s manifests: $overlay_dir"
              rm "$output_file"
              return 0
            else
              echo "‚ùå No valid K8s resources found in $overlay_dir"
              rm "$output_file"
              return 1
            fi
          else
            echo "‚ùå Failed to build kustomization in $overlay_dir"
            rm "$output_file"
            return 1
          fi
        }
        
        # Validate all overlays
        for overlay in apps/*/overlays/*/ infrastructure/*/overlays/*/; do
          if [ -d "$overlay" ]; then
            validate_k8s_manifest "$overlay" || exit 1
          fi
        done
        
        echo "‚úÖ All Kubernetes manifests are valid!"

    - name: Check for common labels
      run: |
        echo "üè∑Ô∏è Checking for required common labels..."
        
        # Function to check common labels
        check_labels() {
          local kustomization_file=$1
          
          echo "Checking labels in $kustomization_file..."
          
          # Check if commonLabels exists
          if yq eval '.commonLabels' "$kustomization_file" | grep -q "null"; then
            echo "‚ö†Ô∏è No commonLabels found in $kustomization_file"
            return 0  # Warning, not error
          fi
          
          # Check for recommended labels
          local managed_by=$(yq eval '.commonLabels."app.kubernetes.io/managed-by"' "$kustomization_file")
          local part_of=$(yq eval '.commonLabels."app.kubernetes.io/part-of"' "$kustomization_file")
          
          if [ "$managed_by" != "null" ] && [ "$part_of" != "null" ]; then
            echo "‚úÖ Good labels in $kustomization_file"
          else
            echo "‚ö†Ô∏è Consider adding app.kubernetes.io/managed-by and app.kubernetes.io/part-of labels in $kustomization_file"
          fi
          
          return 0
        }
        
        # Check base kustomizations for labels
        find . -name "kustomization.yaml" -path "*/base/*" | while read -r file; do
          check_labels "$file"
        done
        
        echo "‚úÖ Label check completed!"

    - name: Summary
      run: |
        echo "üéâ All validations passed!"
        echo ""
        echo "‚úÖ Directory structure follows base/overlays pattern"
        echo "‚úÖ All kustomization.yaml files are valid"
        echo "‚úÖ All kustomize builds are successful"
        echo "‚úÖ All Flux HelmRelease and HelmRepository resources are valid"
        echo "‚úÖ All SealedSecret resources are valid"
        echo "‚úÖ All Kubernetes manifests are syntactically correct"
        echo "‚úÖ Common labels check completed"
        echo ""
        echo "üöÄ This PR is ready for review!"